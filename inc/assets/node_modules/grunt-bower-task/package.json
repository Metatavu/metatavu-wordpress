{
  "_args": [
    [
      {
        "raw": "grunt-bower-task@^0.5.0",
        "scope": null,
        "escapedName": "grunt-bower-task",
        "name": "grunt-bower-task",
        "rawSpec": "^0.5.0",
        "spec": ">=0.5.0 <0.6.0",
        "type": "range"
      },
      "/Users/villekoivukangas/git/metamind-js"
    ]
  ],
  "_from": "grunt-bower-task@>=0.5.0 <0.6.0",
  "_id": "grunt-bower-task@0.5.0",
  "_inCache": true,
  "_location": "/grunt-bower-task",
  "_nodeVersion": "4.4.3",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/grunt-bower-task-0.5.0.tgz_1491534487212_0.2661544138099998"
  },
  "_npmUser": {
    "name": "randomlyknighted",
    "email": "thughes@randomlyknighted.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {
    "glob": "7.0.6"
  },
  "_requested": {
    "raw": "grunt-bower-task@^0.5.0",
    "scope": null,
    "escapedName": "grunt-bower-task",
    "name": "grunt-bower-task",
    "rawSpec": "^0.5.0",
    "spec": ">=0.5.0 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-bower-task/-/grunt-bower-task-0.5.0.tgz",
  "_shasum": "c3c16983fabf18e412e26dfdd2114db465174584",
  "_shrinkwrap": null,
  "_spec": "grunt-bower-task@^0.5.0",
  "_where": "/Users/villekoivukangas/git/metamind-js",
  "author": {
    "name": "Ivan Yatskevich",
    "email": "ivan@yatskevich.com"
  },
  "bugs": {
    "url": "https://github.com/yatskevich/grunt-bower-task/issues"
  },
  "contributors": [
    {
      "name": "Maksim Horbachevsky",
      "url": "https://github.com/fantactuka"
    }
  ],
  "dependencies": {
    "async": "^2.3.0",
    "bower": "^1.7.9",
    "bower-json": "^0.8.1",
    "colors": "^1.1.2",
    "fs-extra": "^2.1.2",
    "lodash": "~0.10.0",
    "rimraf": "^2.6.1"
  },
  "description": "Install Bower packages.",
  "devDependencies": {
    "chai": "^3.5.0",
    "grunt": "^1.0.1",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-nodeunit": "^1.0.0",
    "grunt-simple-mocha": "^0.4.1"
  },
  "directories": {},
  "dist": {
    "shasum": "c3c16983fabf18e412e26dfdd2114db465174584",
    "tarball": "https://registry.npmjs.org/grunt-bower-task/-/grunt-bower-task-0.5.0.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "gitHead": "66b222ea1dea81538d1cb9d8da1c19dbcf55d6dd",
  "homepage": "https://github.com/yatskevich/grunt-bower-task",
  "keywords": [
    "gruntplugin",
    "bower"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/yatskevich/grunt-bower-task/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "maintainers": [
    {
      "name": "randomlyknighted",
      "email": "thughes@randomlyknighted.com"
    },
    {
      "name": "yatskevich",
      "email": "ivan@yatskevich.com"
    }
  ],
  "name": "grunt-bower-task",
  "optionalDependencies": {},
  "readme": "# grunt-bower-task [![Build Status](https://travis-ci.org/yatskevich/grunt-bower-task.png)](https://travis-ci.org/yatskevich/grunt-bower-task)\r\n[![npm](https://img.shields.io/npm/v/grunt-bower-task.svg?maxAge=2592000)](https://github.com/yatskevich/grunt-bower-task)\r\n[![Dependency Status](https://david-dm.org/yatskevich/grunt-bower-task.svg)](https://david-dm.org/yatskevich/grunt-bower-task)\r\n[![devDependency Status](https://david-dm.org/yatskevich/grunt-bower-task/dev-status.svg)](https://david-dm.org/yatskevich/grunt-bower-task#info=devDependencies)\r\n\r\n> Install Bower packages. Smartly.\r\n\r\n## Getting Started\r\n_If you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide._\r\n\r\nPlease note, this plugin works **only with grunt 0.4+**. If you are using grunt 0.3.x then consider an [upgrade to 0.4][].\r\n\r\nFrom the same directory as your project's [Gruntfile][Getting Started] and [package.json][], install this plugin with the following command:\r\n\r\n```bash\r\nnpm install grunt-bower-task --save-dev\r\n```\r\n\r\nOnce that's done, add this line to your project's Gruntfile:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-bower-task');\r\n```\r\n\r\nIf the plugin has been installed correctly, running `grunt --help` at the command line should list the newly-installed plugin's task or tasks. In addition, the plugin should be listed in package.json as a `devDependency`, which ensures that it will be installed whenever the `npm install` command is run.\r\n\r\n[grunt]: http://gruntjs.com/\r\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\r\n[package.json]: https://npmjs.org/doc/json.html\r\n[upgrade to 0.4]: https://github.com/gruntjs/grunt/wiki/Upgrading-from-0.3-to-0.4\r\n\r\n## Grunt task for Bower\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `bower` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  bower: {\r\n    install: {\r\n       //just run 'grunt bower:install' and you'll see files from your Bower packages in lib directory\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### Options\r\n\r\n#### options.targetDir\r\nType: `String`\r\nDefault value: `./lib`\r\n\r\nA directory where you want to keep your Bower packages.\r\n\r\n#### options.install\r\nType: `Boolean`\r\nDefault value: `true`\r\n\r\nWhether you want to run bower install task itself (e.g. you might not want to do this each time on CI server).\r\n\r\n#### options.prune\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether you want to run bower prune task itself (e.g. you might not want to do this each time on CI server).\r\n\r\n#### options.cleanTargetDir\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill clean target dir before running install.\r\n\r\n#### options.cleanBowerDir\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill remove bower's dir after copying all needed files into target dir.\r\n\r\n#### options.copy\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nCopy Bower packages to target directory.\r\n\r\n#### options.cleanup\r\nType: `boolean`\r\nDefault value: `undefined`\r\n\r\n**NOTE:** If set to true or false then both `cleanBowerDir` & `cleanTargetDir` are set to the value of `cleanup`.\r\n\r\n#### options.layout\r\nType: `string` or `function`\r\nDefault value: `byType`\r\n\r\nThere are two built-in named layouts: `byType` and `byComponent`.\r\n\r\n`byType` layout will produce the following structure:\r\n\r\n```\r\nlib\r\n|-- js\r\n|   |- bootstrap\r\n|   \\- require\r\n|-- css\r\n    \\- bootstrap\r\n```\r\nwhere `js`, `css` come from `exportsOverride` section described below.\r\n\r\n`byComponent` will group assets by type under component name:\r\n\r\n```\r\nlib\r\n|-- bootstrap\r\n|   |- js\r\n|   \\- css\r\n|-- require\r\n    \\- js\r\n```\r\n\r\nIf you need to support custom layout then you can specify `layout` as a function of `type`, `component` and `source`:\r\n\r\n```js\r\nvar path = require('path');\r\n\r\ngrunt.initConfig({\r\n  bower: {\r\n    install: {\r\n      options: {\r\n        layout: function(type, component, source) {\r\n          var renamedType = type;\r\n          if (type == 'js') renamedType = 'javascripts';\r\n          else if (type == 'css') renamedType = 'stylesheets';\r\n\r\n          return path.join(component, renamedType);\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nYou can use `source` parameter value in order to produce more flexible layout based on the resource file name.\r\nTake a look at [PR #114][] as an example.\r\n\r\n[PR #114]: https://github.com/yatskevich/grunt-bower-task/pull/114\r\n\r\n#### options.verbose\r\nType: `boolean`\r\nDefault value: `false`\r\n\r\nThe task will provide more (debug) output when this option is set to `true`. You can also use `--verbose` when running task for same effect.\r\n\r\n#### options.bowerOptions\r\nType: `Object`\r\nDefault value: `{}`\r\n\r\nAn options object passed through to the `bower.install` api, possible options are as follows:\r\n\r\n```\r\n{\r\n    forceLatest: true|false,    // Force latest version on conflict\r\n    production: true|false,     // Do not install project devDependencies\r\n}\r\n```\r\n\r\n### Usage Examples\r\n\r\n#### Default Options\r\nDefault options are good enough if you want to install Bower packages and keep only `\"main\"` files (as specified by package's `bower.json`) in separate directory.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  bower: {\r\n    install: {\r\n      options: {\r\n        copy: false,\r\n        targetDir: './lib',\r\n        layout: 'byType',\r\n        install: true,\r\n        verbose: false,\r\n        prune: false,\r\n        cleanTargetDir: false,\r\n        cleanBowerDir: false,\r\n        bowerOptions: {}\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Custom Options\r\nIn this initial version there are no more options in plugin itself. **BUT!**\r\n\r\n### Advanced usage\r\nAt this point of time \"Bower package\" = \"its git repository\". It means that package includes tests, licenses, etc.\r\nBower's community actively discusses this issue (GitHub issues [#46][],[#88][], [on Google Groups][GG])\r\nThat's why you can find such tools like [blittle/bower-installer][] which inspired this project.\r\n\r\n[GG]: https://groups.google.com/forum/?fromgroups=#!topic/twitter-bower/SQEDDA_gmh0\r\n[#88]: https://github.com/twitter/bower/issues/88\r\n[#46]: https://github.com/twitter/bower/issues/46\r\n[blittle/bower-installer]: https://github.com/blittle/bower-installer\r\n\r\nOkay, if you want more than `\"main\"` files in `./lib` directory then put `\"exportsOverride\"` section into your `bower.json`:\r\n\r\n```json\r\n{\r\n  \"name\": \"simple-bower\",\r\n  \"version\": \"0.0.0\",\r\n  \"dependencies\": {\r\n    \"jquery\": \"~1.8.3\",\r\n    \"bootstrap-sass\": \"*\",\r\n    \"requirejs\": \"*\"\r\n  },\r\n  \"exportsOverride\": {\r\n    \"bootstrap-sass\": {\r\n      \"js\": \"js/*.js\",\r\n      \"scss\": \"lib/*.scss\",\r\n      \"img\": \"img/*.png\"\r\n    },\r\n    \"requirejs\": {\r\n      \"js\": \"require.js\"\r\n    }\r\n  }\r\n}\r\n```\r\n`grunt-bower-task` will do the rest:\r\n\r\n* If Bower package has defined `\"main\"` files then they will be copied to `./lib/<package>/`.\r\n* If `\"main\"` files are empty then the whole package directory will be copied to `./lib`.\r\n* When you define `\"exportsOverride\"` only asset types and files specified by you will be copied to `./lib`.\r\n\r\nFor the example above you'll get the following files in `.lib` directory:\r\n\r\n```\r\njquery/jquery.js\r\njs/bootstrap-sass/bootstrap-affix.js\r\n...\r\njs/bootstrap-sass/bootstrap-typeahead.js\r\njs/requirejs/require.js\r\nscss/bootstrap-sass/_accordion.scss\r\n...\r\nscss/bootstrap-sass/_wells.scss\r\nscss/bootstrap-sass/bootstrap.scss\r\nscss/bootstrap-sass/responsive.scss\r\nimg/bootstrap-sass/glyphicons-halflings-white.png\r\nimg/bootstrap-sass/glyphicons-halflings.png\r\n```\r\n\r\n### Wildcard and RegExp support\r\n\r\nIf you have the same override rules for multiple Bower components you can make use of simple wildcard:\r\n\r\n```json\r\n{\r\n    \"exportsOverride\": {\r\n        \"bootstrap-*\": {        // will match 'bootstrap-modal', 'bootstrap-notify', etc.\r\n          \"js\": \"**/*.js\",\r\n          \"css\": \"**/*.css\"\r\n        },\r\n\r\n        \"*\": {                  // will match everything else\r\n          \"js\": \"**/*.js\",\r\n          \"css\": \"**/*.css\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nYou can use syntax which mirrors native JavaScript RegExp literal syntax, e.g. `/bootstrap.+/` or even `/jquery.date.v(\\\\d{1}).\\\\w{1}/`,\r\nif you have complex matching rules.\r\n\r\nUsage example in `bower.json`:\r\n\r\n```json\r\n{\r\n  \"exportsOverride\": {\r\n    \"/jquery.date.v(\\\\d{1}).\\\\w{1}/\": { // will match 'jquery.date.v1.2', 'jquery_date_v1_2'\r\n      \"js\": \"js/*.js\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Caveats\r\n\r\n- An evaluation order depends on the order of entries in `exportsOverride` section in your `bower.json`.\r\n- Pay attention to what characters you use in RegExp overrides - '.' and '*' has special meaning in regular expressions.\r\n- If you put `*` as the first entry in `exportsOverride`, it'll match everything, so other rules will be skipped.\r\n\r\n## License\r\nCopyright (c) 2012-2013 Ivan Yatskevich\r\n\r\nLicensed under the MIT license.\r\n\r\n<https://github.com/yatskevich/grunt-bower-task/blob/master/LICENSE-MIT>\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/yatskevich/grunt-bower-task.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.5.0"
}
