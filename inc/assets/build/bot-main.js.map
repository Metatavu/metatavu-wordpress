{"version":3,"sources":["../js/bot-main.js"],"names":["MetamindClient","require","queryString","Metamind","constructor","options","apiUrl","apiKey","story","listeners","locale","timeZone","sessionId","maxRetryCount","retries","visitor","ajaxurl","metamindmwp","initClient","on","eventName","listener","push","Error","sendMessage","message","action","content","$","post","response","botResponse","JSON","parse","trigger","fail","console","log","responseText","statusText","getSessionId","Promise","resolve","data","forEach","location","search","window","metamind"],"mappings":"AAEA,KAAMA,gBAAiBC,QAAQ,iBAAR,CAAvB,CACA,KAAMC,aAAcD,QAAQ,cAAR,CAApB,CAEA,KAAME,SAAS,CAEbC,YAAYC,OAAZ,CAAqB,CACnB,KAAKC,MAAL,CAAcD,QAAQC,MAAtB,CACA,KAAKC,MAAL,CAAcF,QAAQE,MAAtB,CACA,KAAKC,KAAL,CAAaH,QAAQG,KAArB,CACA,KAAKC,SAAL,CAAiB,EAAjB,CACA,KAAKC,MAAL,CAAc,IAAd,CACA,KAAKC,QAAL,CAAgB,iBAAhB,CACA,KAAKC,SAAL,CAAiBP,QAAQO,SAAR,EAAqB,IAAtC,CACA,KAAKC,aAAL,CAAqB,CAArB,CACA,KAAKC,OAAL,CAAgB,CAAhB,CACA,KAAKC,OAAL,CAAe,SAAf,CACA,KAAKC,OAAL,CAAeC,YAAYD,OAC5B,CAEDE,YAAa,CACZ,CAEDC,GAAGC,SAAH,CAAcC,QAAd,CAAwB,CACtB,GAAI,MAAOA,SAAP,GAAoB,UAAxB,CAAoC,CAClC,GAAI,CAAC,KAAKZ,SAAL,CAAeW,SAAf,CAAL,CAAgC,CAC9B,KAAKX,SAAL,CAAeW,SAAf,EAA4B,EAC7B,CACD,KAAKX,SAAL,CAAeW,SAAf,EAA0BE,IAA1B,CAA+BD,QAA/B,CACD,CALD,IAKO,CACL,KAAM,IAAIE,MAAJ,CAAU,mCAAV,CACP,CACF,CAEDC,YAAYC,OAAZ,CAAqBC,MAArB,CAA6B,CAC3B,KAAMC,SAAU,CACdjB,OAAQ,KAAKA,MADC,CAEdC,SAAU,KAAKA,QAFD,CAGdH,MAAO,KAAKA,KAHE,CAIdO,QAAS,KAAKA,OAJA,CAKdH,UAAW,KAAKA,SALF,CAMde,QAASF,OANK,CAAhB,CASAG,EAAEC,IAAF,CAAO,KAAKb,OAAZ,CAAqB,CACnB,SAAU,cADS,CAEnB,OAAQW,OAFW,CAArB,CAGIG,QAAD,EAAc,CACf,KAAMC,aAAcC,KAAKC,KAAL,CAAWH,QAAX,CAApB,CACA,KAAKlB,SAAL,CAAiBmB,YAAYnB,SAA7B,CACA,KAAKsB,OAAL,CAAa,UAAb,CAAyBH,WAAzB,CACD,CAPD,EAQCI,IARD,CAQQL,QAAD,EAAc,CACnBM,QAAQC,GAAR,CAAYP,SAASQ,YAAT,EAAyBR,SAASS,UAAlC,EAAgD,wBAA5D,CACD,CAVD,CAWD,CAEDC,cAAe,CACb,GAAI,KAAK5B,SAAT,CAAoB,CAClB,MAAO6B,SAAQC,OAAR,CAAgB,KAAK9B,SAArB,CACR,CAFD,IAEO,CACL,MAAO6B,SAAQC,OAAR,CAAgB,EAAhB,CACR,CACF,CAEDR,QAAQd,SAAR,CAAmBuB,IAAnB,CAAyB,CACvB,GAAI,KAAKlC,SAAL,CAAeW,SAAf,CAAJ,CAA+B,CAC7B,KAAKX,SAAL,CAAeW,SAAf,EAA0BwB,OAA1B,CAAmCvB,QAAD,EAAc,CAC9CA,SAASsB,IAAT,CACD,CAFD,CAGD,CACF,CAEDN,IAAIZ,OAAJ,CAAa,CACX,GAAI,MAAOW,SAAQC,GAAf,GAAuB,UAA3B,CAAuC,CACrCD,QAAQC,GAAR,CAAYZ,OAAZ,CACD,CACF,CAzEY,CA4Ef,KAAMpB,SAAUH,YAAY+B,KAAZ,CAAkBY,SAASC,MAA3B,CAAhB,CAEAC,OAAO5C,QAAP,CAAkBA,QAAlB,CACA4C,OAAOC,QAAP,CAAkB,GAAI7C,SAAJ,CAAaE,OAAb,CAAlB","file":"bot-main.js","sourcesContent":["/* global Promise */\n\nconst MetamindClient = require('metamind-client');\nconst queryString = require('query-string');\n\nclass Metamind {\n  \n  constructor(options) {\n    this.apiUrl = options.apiUrl;\n    this.apiKey = options.apiKey;\n    this.story = options.story;\n    this.listeners = {};\n    this.locale = 'fi';\n    this.timeZone = 'Europe/Helsinki';\n    this.sessionId = options.sessionId || null;\n    this.maxRetryCount = 5;\n    this.retries =  0;\n    this.visitor = 'Unknown';\n    this.ajaxurl = metamindmwp.ajaxurl;\n  }\n  \n  initClient() {\n  }\n  \n  on(eventName, listener) {\n    if (typeof listener === \"function\") {\n      if (!this.listeners[eventName]) {\n        this.listeners[eventName] = [];\n      }\n      this.listeners[eventName].push(listener);\n    } else {\n      throw new Error('Invalid metamind message listener'); \n    }\n  }\n  \n  sendMessage(message, action) {\n    const content = {\n      locale: this.locale,\n      timeZone: this.timeZone,\n      story: this.story,\n      visitor: this.visitor,\n      sessionId: this.sessionId,\n      content: message\n    };\n\n    $.post(this.ajaxurl, {\n      'action': 'send_message',\n      'data': content\n    }, (response) => {\n      const botResponse = JSON.parse(response);\n      this.sessionId = botResponse.sessionId;\n      this.trigger('response', botResponse);\n    })\n    .fail( (response) => {\n      console.log(response.responseText || response.statusText || \"Unknown error occurred\");\n    });\n  }\n  \n  getSessionId() {\n    if (this.sessionId) {\n      return Promise.resolve(this.sessionId);\n    } else {\n      return Promise.resolve('');\n    }\n  }\n  \n  trigger(eventName, data) {\n    if (this.listeners[eventName]) {\n      this.listeners[eventName].forEach((listener) => {\n        listener(data);\n      });  \n    }\n  }\n  \n  log(message) {\n    if (typeof console.log === \"function\") {\n      console.log(message);\n    }\n  }\n}\n\nconst options = queryString.parse(location.search);\n\nwindow.Metamind = Metamind;\nwindow.metamind = new Metamind(options);"]}